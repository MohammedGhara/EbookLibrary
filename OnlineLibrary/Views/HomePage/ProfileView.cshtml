@model OnlineLibrary.Models.CustomerModel
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Profile</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #232526, #414345, #2C3E50, #0f2027);
            margin: 0;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: auto;
            background: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        }

        h1 {
            text-align: center;
            color: #333;
        }

        .alert {
            padding: 10px;
            margin-bottom: 20px;
            border-radius: 5px;
        }

        .alert-success {
            background-color: #d4edda;
            color: #155724;
        }

        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
        }

        .profile-details {
            margin-bottom: 20px;
        }

            .profile-details h2 {
                margin: 0 0 10px;
            }

            .profile-details p {
                margin: 5px 0;
            }

        .books-section {
            margin-top: 30px;
        }

            .books-section h2 {
                display: flex;
                justify-content: center;
                align-items: center;
                gap: 10px;
                font-size: 36px;
                font-weight: 800;
                text-align: center;
                color: #f1c40f; /* Bold gold */
                text-shadow: 0 0 8px rgba(0, 0, 0, 0.4); /* subtle black glow */
                margin-bottom: 20px;
                position: relative;
            }

                .books-section h2::before {
                    content: "📘";
                    font-size: 34px;
                    filter: drop-shadow(0 0 3px #000);
                }

                .books-section h2::after {
                    content: '';
                    position: absolute;
                    bottom: -8px;
                    left: 50%;
                    transform: translateX(-50%);
                    width: 80px;
                    height: 4px;
                    background: linear-gradient(to right, #f1c40f, #9b59b6);
                    border-radius: 8px;
                    box-shadow: 0 2px 8px rgba(155, 89, 182, 0.5);
                }


        .book-card {
            display: flex;
            flex-direction: column;
            background: linear-gradient(145deg, #1c1c2b, #292940); /* match top section */
            color: #f1f1f1; /* light text */
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.4), inset 0 0 8px rgba(255, 255, 255, 0.05);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }


            .book-card:hover {
                transform: scale(1.015);
                box-shadow: 0 6px 25px rgba(0, 0, 0, 0.6);
            }


        .book-details p {
            margin: 4px 0;
            font-size: 0.95rem;
            color: #ccc;
        }

        .book-card h3 {
            color: #ffc107; /* soft yellow for titles */
        }

        .book-card p {
            color: #ddd; /* light gray text */
        }


        /* Download Buttons */
        /* Button container */
        .download-buttons {
            margin-top: 10px;
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

            .download-buttons button {
                background-color: #4a90e2;
                color: white;
                padding: 8px 12px;
                font-size: 14px;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                transition: background-color 0.2s ease;
            }

                .download-buttons button:hover {
                    background-color: #357ABD;
                }

        .remove-button {
            background-color: #e74c3c;
            color: white;
            margin-top: 12px;
            padding: 8px 12px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
        }

            .remove-button:hover {
                background-color: #c0392b;
            }
        /* Rating Form */
        .rating-form {
            margin-top: 20px;
            padding: 15px;
            background: rgba(255, 255, 255, 0.02);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
        }

            .rating-form label {
                font-weight: bold;
                margin-bottom: 4px;
                display: block;
                color: #ffc107;
            }

            .rating-form textarea {
                width: 100%;
                border-radius: 8px;
                border: none;
                padding: 8px;
                resize: vertical;
                background-color: #fff;
                color: #333;
            }

            .rating-form .stars {
                display: flex;
                gap: 5px;
                cursor: pointer;
                font-size: 24px;
                margin-bottom: 10px;
            }

                .rating-form .stars span {
                    color: #ccc;
                    transition: color 0.2s ease;
                }

                    .rating-form .stars span.selected {
                        color: gold;
                    }

            .rating-form button {
                background-color: green;
                color: white;
                border: none;
                padding: 6px 12px;
                border-radius: 6px;
                cursor: pointer;
                transition: background-color 0.2s ease;
            }

                .rating-form button:hover {
                    background-color: darkgreen;
                }

        .profile-header {
            text-align: center;
            margin-bottom: 30px;
        }

        .rating-form textarea {
            width: 100%;
            border-radius: 10px;
            padding: 12px 14px;
            font-size: 14px;
            resize: vertical;
            background-color: rgba(255, 255, 255, 0.9); /* almost white, 90% opacity */
            color: #1e1e2f; /* dark text for contrast */
            border: 1px solid #ccc;
            box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.15);
            transition: all 0.2s ease;
        }

            .rating-form textarea:focus {
                outline: none;
                border-color: #ffc107; /* soft yellow glow */
                box-shadow: 0 0 8px rgba(255, 193, 7, 0.5);
            }


        .glow-title {
            font-size: 40px;
            font-weight: bold;
            color: #ffcc80;
            text-shadow: 0 0 10px #ffcc80, 0 0 20px #ffcc80;
        }

        .glow-back-btn {
            display: inline-block;
            margin-top: 15px;
            padding: 10px 20px;
            background-color: #1e1e2f;
            color: #ffcc80;
            font-weight: bold;
            text-decoration: none;
            border-radius: 30px;
            box-shadow: 0 0 15px #8e44ad;
            transition: all 0.3s ease;
        }

            .glow-back-btn:hover {
                background-color: #2c2c3e;
                color: white;
                box-shadow: 0 0 25px #8e44ad, 0 0 40px #9b59b6;
            }

        /* Animate book cards */
        .book-card {
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

            .book-card:hover {
                transform: scale(1.015);
                box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            }

   



        /* Star rating improvement */
        .rating-form select {
            display: none;
        }

        .rating-form .stars {
            display: flex;
            gap: 5px;
            cursor: pointer;
            font-size: 24px;
            margin-bottom: 10px;
        }

            .rating-form .stars span {
                color: #ccc;
            }

                .rating-form .stars span.selected {
                    color: gold;
                }

        .profile-overview {
            background: linear-gradient(145deg, #1c1c2b, #292940);
            color: #f1f1f1;
            border-radius: 20px;
            padding: 30px;
            margin: 40px auto;
            max-width: 900px;
            box-shadow: 0 4px 30px rgba(0, 0, 0, 0.4), 0 0 25px rgba(138, 43, 226, 0.2), inset 0 0 15px rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(5px);
            transition: all 0.3s ease;
            animation: fadeIn 1s ease-out;
        }
@@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}
.stats div {
    background-color: #292940;
    padding: 8px 16px;
    border-radius: 15px;
    font-weight: bold;
    color: #ffc107;
    box-shadow: inset 0 0 5px #ffcc80, 0 0 10px rgba(255, 193, 7, 0.1);
}

.profile-info h2 {
    font-size: 32px;
    margin-bottom: 10px;
    text-shadow: 0 0 5px rgba(255, 255, 255, 0.1);
}

.profile-details h2 {
    font-size: 24px;
    margin-top: 20px;
    color: #ffc107;
}

.profile-details p {
    font-size: 16px;
    margin: 4px 0;
    color: #ddd;
}



        .profile-info h2 {
            margin: 0;
            font-size: 28px;
        }

        .badge {
            display: inline-block;
            background-color: #ffc107;
            color: #333;
            font-weight: bold;
            padding: 6px 12px;
            border-radius: 20px;
            margin: 10px 0;
        }

        .stats {
            display: flex;
            gap: 20px;
            margin-top: 10px;
            font-size: 16px;
        }

    </style>
</head>
<body>

    <div class="profile-header">
        <h1 class="glow-title">📚 Welcome, @Model.firstname!</h1>
        <a href="/HomePage" class="glow-back-btn">← Back to Home</a>
    </div>
    <div class="profile-overview">
        <div class="profile-info">
            <h2>@Model.firstname @Model.lastname</h2>
            <div class="stats">
                <div><strong>Purchased:</strong> @(Model.PurchaseBooks?.Count() ?? 0)</div>
                <div><strong>Borrowed:</strong> @(Model.LoanedBook?.Count() ?? 0)</div>
                <div><strong>Ratings Given:</strong> <!-- Replace with your count if available --> ~</div>
            </div>
            <!-- User Details -->
            <div class="profile-details">
                <h2>Your Details</h2>
                <p><strong>Email:</strong> @Model.email</p>
            </div>
        </div>
    </div>
    <div class="container">
        <!-- Hidden success message box (unchanged) -->
        <div id="ratingSuccessMessage" class="alert alert-success" style="display: none;">
            Rating submitted successfully!
        </div>


      

        <!-- Purchased Books -->
        <div class="books-section">
            <h2>Your Purchased Books</h2>

            @if (Model.PurchaseBooks != null && Model.PurchaseBooks.Any())
            {
                foreach (var book in Model.PurchaseBooks)
                {
                    <div class="book-card">
                        <div class="book-details">
                            <h3>@book.Title</h3>
                            <p><strong>Author:</strong> @book.Author</p>
                            <p><strong>Publication Year:</strong> @book.PublicationYear</p>
                            <p><strong>Genre:</strong> @book.Genre</p>

                            <!-- Price Paid -->
                            <p><strong>Price Paid:</strong> $@(book.PricePaid?.ToString("F2") ?? "0.00")</p>

                            <!-- Download Buttons -->
                            <div class="download-buttons">
                                <button type="button" onclick="downloadBook('@book.BookID', 'pdf')">Download PDF</button>
                                <button type="button" onclick="downloadBook('@book.BookID', 'f2b')">Download F2B</button>
                                <button type="button" onclick="downloadBook('@book.BookID', 'mobi')">Download MOBI</button>
                                <button type="button" onclick="downloadBook('@book.BookID', 'epub')">Download EPUB</button>
                            </div>

                            <!-- Remove Button -->
                            <form method="post" action="@Url.Action("RemovePurchasedBook", "HomePage")">
                                <input type="hidden" name="bookId" value="@book.BookID" />
                                <button type="submit" class="remove-button">Remove</button>
                            </form>

                            <!-- Rating Form -->
                            <div class="rating-form">
                                <form method="post" action="/Ratings/AddRating">
                                    <input type="hidden" name="BookID" value="@book.BookID" />
                                    <label for="ratingStars">Rate The Book:</label>

                                    <div class="stars" data-target="ratingStars">
                                        <span data-value="1">★</span>
                                        <span data-value="2">★</span>
                                        <span data-value="3">★</span>
                                        <span data-value="4">★</span>
                                        <span data-value="5">★</span>
                                    </div>
                                    <input type="hidden" name="RatingStars" id="ratingStars" value="5" />

                                    <label for="comment">Comment:</label>
                                     <textarea id="comment" name="Comment" rows="3" cols="40" placeholder="Write your comment here..."></textarea>

                                    <button type="submit">Submit Rating</button>
                                </form>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>You haven't purchased any books yet.</p>
            }
        </div>

        <!-- Borrowed Books -->
        <div class="books-section">
            <h2>Your Borrowed Books</h2>

            @if (Model.LoanedBook != null && Model.LoanedBook.Any())
            {
                foreach (var book in Model.LoanedBook)
                {
                    <div class="book-card">
                        <div class="book-details">
                            <h3>@book.Title</h3>

                            <p><strong>Loan Date:</strong> @book.LoanDate.ToString("dd/MM/yy")</p>
                            <p><strong>End Date:</strong> @book.EndDate.ToString("dd/MM/yy")</p>

                            <!-- Download Buttons -->
                            <div class="download-buttons">
                                <button type="button" onclick="downloadBook('@book.BookID', 'pdf')">Download PDF</button>
                                <button type="button" onclick="downloadBook('@book.BookID', 'f2b')">Download F2B</button>
                                <button type="button" onclick="downloadBook('@book.BookID', 'mobi')">Download MOBI</button>
                                <button type="button" onclick="downloadBook('@book.BookID', 'epub')">Download EPUB</button>
                            </div>

                            <!-- Return Button -->
                            <form method="post" action="@Url.Action("ReturnBook", "HomePage")">
                                <input type="hidden" name="bookID" value="@book.BookID" />
                                <button type="submit"
                                        style="color: white; background-color: red; border: none; padding: 8px 16px; border-radius: 5px; cursor: pointer;">
                                    Return Book
                                </button>
                            </form>

                            <!-- Rating Form -->
                            <div class="rating-form">
                                <form method="post" action="/Ratings/AddRating">
                                    <input type="hidden" name="BookID" value="@book.BookID" />
                                    <label for="ratingStars">Rate The Book:</label>
                                    <div class="stars" data-target="ratingStars">
                                        <span data-value="1">★</span>
                                        <span data-value="2">★</span>
                                        <span data-value="3">★</span>
                                        <span data-value="4">★</span>
                                        <span data-value="5">★</span>
                                    </div>
                                    <input type="hidden" name="RatingStars" id="ratingStars" value="5" />


                                    <label for="comment">Comment:</label>
                                    <textarea id="comment" name="Comment" rows="3" cols="40" placeholder="Write your comment here..."></textarea>

                                    <button type="submit">Submit Rating</button>
                                </form>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>You haven't borrowed any books yet.</p>
            }
        </div>
    </div>

    <script>
        function downloadBook(bookId, extension) {
            if (!bookId || !extension) {
                console.error("Missing bookId or extension.");
                return;
            }
            const convertUrl = `/EbookConversion/Convert?bookId=${encodeURIComponent(bookId)}&format=${encodeURIComponent(extension)}`;
            console.log("Constructed URL:", convertUrl);
            window.open(convertUrl, "_blank");
        }

        // Intercept rating form submissions
        document.addEventListener('DOMContentLoaded', function () {
            const ratingForms = document.querySelectorAll('.rating-form form');

            ratingForms.forEach(form => {
                form.addEventListener('submit', function (e) {
                    e.preventDefault(); // stop normal form submission

                    // Post via fetch
                    fetch(form.action, {
                        method: 'POST',
                        body: new FormData(form)
                    })
                    .then(response => {
                        if (response.ok) {
                            // Show the hidden success message
                            const successBox = document.getElementById('ratingSuccessMessage');
                            successBox.style.display = 'block';

                            // ADDED: Show JS alert as well
                            alert("Rating submitted successfully!");

                            // Optionally clear the form
                            form.reset();
                        } else {
                            alert("Failed to submit rating. Server returned status " + response.status);
                        }
                    })
                    .catch(error => {
                        console.error("Error submitting rating:", error);
                        alert("An error occurred while submitting rating.");
                    });
                });
            });
        });
        // Star rating interaction
        document.querySelectorAll('.stars').forEach(starContainer => {
            const stars = starContainer.querySelectorAll('span');
            const input = starContainer.nextElementSibling;

            stars.forEach(star => {
                star.addEventListener('click', () => {
                    const value = parseInt(star.dataset.value);
                    input.value = value;
                    stars.forEach(s => s.classList.remove('selected'));
                    stars.forEach(s => {
                        if (parseInt(s.dataset.value) <= value) {
                            s.classList.add('selected');
                        }
                    });
                });
            });
        });

    </script>
</body>
</html>
